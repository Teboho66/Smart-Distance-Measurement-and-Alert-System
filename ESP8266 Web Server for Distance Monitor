#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>

#define RX_PIN D6  // Connect to Arduino TX
#define TX_PIN D5  // Connect to Arduino RX

const char* ssid = "YourWiFiSSID";
const char* password = "YourWiFiPassword";

ESP8266WebServer server(80);
SoftwareSerial arduinoSerial(RX_PIN, TX_PIN);

struct SensorData {
  int distance;
  int mode;
  bool alert;
} latestData;

void setup() {
  Serial.begin(115200);
  arduinoSerial.begin(9600);
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  
  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.begin();
}

void loop() {
  server.handleClient();
  
  if (arduinoSerial.available()) {
    String data = arduinoSerial.readStringUntil('\n');
    parseData(data);
  }
}

void parseData(String data) {
  int firstComma = data.indexOf(',');
  int secondComma = data.indexOf(',', firstComma + 1);
  
  latestData.distance = data.substring(0, firstComma).toInt();
  latestData.mode = data.substring(firstComma + 1, secondComma).toInt();
  latestData.alert = data.substring(secondComma + 1).toInt() == 1;
}

void handleRoot() {
  String html = "<!DOCTYPE html><html><head>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1'>";
  html += "<title>Distance Monitor</title>";
  html += "<script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js'></script>";
  html += "<style>body{font-family:Arial,sans-serif;margin:0;padding:20px;text-align:center}";
  html += ".container{max-width:800px;margin:0 auto}";
  html += ".alert{color:red;font-weight:bold}";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>Distance Monitor</h1>";
  html += "<div id='currentData'></div>";
  html += "<canvas id='distanceChart'></canvas>";
  html += "</div>";
  html += "<script>";
  html += "let chart;";
  html += "function updateData(){";
  html += "fetch('/data').then(r=>r.json()).then(data=>{";
  html += "document.getElementById('currentData').innerHTML=`";
  html += "<h2>Distance: ${data.distance} cm</h2>";
  html += "<p>Mode: ${['Normal','Silent','Alert Only'][data.mode]}</p>`;";
  html += "if(data.alert){document.getElementById('currentData').innerHTML+='<p class=\"alert\">ALERT: Object too close!</p>';}";
  html += "updateChart(data.distance);";
  html += "});}";
  html += "function updateChart(newDistance){";
  html += "if(!chart){initChart();}";
  html += "chart.data.labels.push(new Date().toLocaleTimeString());";
  html += "chart.data.datasets[0].data.push(newDistance);";
  html += "if(chart.data.labels.length>20){chart.data.labels.shift();chart.data.datasets[0].data.shift();}";
  html += "chart.update();}";
  html += "function initChart(){";
  html += "chart=new Chart('distanceChart',{type:'line',data:{labels:[],datasets:[{label:'Distance (cm)',data:[],borderColor:'blue',fill:false}]},";
  html += "options:{scales:{yAxes:[{ticks:{beginAtZero:true}}]}}});}";
  html += "setInterval(updateData,1000);";
  html += "</script></body></html>";
  server.send(200, "text/html", html);
}

void handleData() {
  StaticJsonDocument<200> doc;
  doc["distance"] = latestData.distance;
  doc["mode"] = latestData.mode;
  doc["alert"] = latestData.alert;
  
  String jsonString;
  serializeJson(doc, jsonString);
  server.send(200, "application/json", jsonString);
}
